import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Stack;
/**
 * 
 * @author Rasata Liantsoa
 * Handle the code generation 
 */
public class Generation implements Type{
	
	private OutputStream FichierGen ;
	private ArrayList<String> buffer;
	
	public Generation(){
		FichierGen=Ecriture.ouvrir("result.java");
		buffer = new ArrayList<String>(); 
	}
	
	/**
	 * Generate the code to initialize the counters
	 * @param t the table of identifiers
	 * @param method  
	 */
	public void declInitCompt(TabIdent t, String identCondition){
		int i;
		String counter;
		
		Ident ident = new Ident(identCondition);
		ident = t.chercheIdent(identCondition);
		
		for (i=0;i<ident.getTailleTabParam();i++){	
			counter=ident.getCompteur(i).getName();
			if(!buffer.contains(counter)){
				buffer.add(counter);
				ecrireCompt(counter);
			}
	
		}
		
	}

	
	public void ecrireCompt(String compteur){
		Ecriture.ecrireString(FichierGen,"private ");
		Ecriture.ecrireString(FichierGen,"int ");
		Ecriture.ecrireString(FichierGen,compteur);
		Ecriture.ecrireString(FichierGen,"= 0;");
		Ecriture.ecrireString(FichierGen,"\n");
	}
	
	public void declComptReq(String methode){
		Ecriture.ecrireString(FichierGen,"private ");
		Ecriture.ecrireString(FichierGen,"int ");
		Ecriture.ecrireString(FichierGen,methode+"_"+"req ");
		Ecriture.ecrireString(FichierGen,"= 0;");
		Ecriture.ecrireString(FichierGen,"\n");
	}
	
	public void declComptAut(String methode){
		Ecriture.ecrireString(FichierGen,"private ");
		Ecriture.ecrireString(FichierGen,"int ");
		Ecriture.ecrireString(FichierGen,methode+"_"+"aut ");
		Ecriture.ecrireString(FichierGen,"= 0;");
		Ecriture.ecrireString(FichierGen,"\n");
	}
	
	public void declComptTerm(String methode){
		Ecriture.ecrireString(FichierGen,"private ");
		Ecriture.ecrireString(FichierGen,"int ");
		Ecriture.ecrireString(FichierGen,methode+"_"+"term ");
		Ecriture.ecrireString(FichierGen,"= 0;");
		Ecriture.ecrireString(FichierGen,"\n");
	}
	
	public void declComptAct(String methode){
		Ecriture.ecrireString(FichierGen,"private ");
		Ecriture.ecrireString(FichierGen,"int ");
		Ecriture.ecrireString(FichierGen,methode+"_"+"act ");
		Ecriture.ecrireString(FichierGen,"= 0;");
		Ecriture.ecrireString(FichierGen,"\n");
	}
	
	public void declComptAtt(String methode){
		Ecriture.ecrireString(FichierGen,"private ");
		Ecriture.ecrireString(FichierGen,"int ");
		Ecriture.ecrireString(FichierGen,methode+"_"+"att ");
		Ecriture.ecrireString(FichierGen,"= 0;");
		Ecriture.ecrireString(FichierGen,"\n");
	}
	
	public String consExprbool(String identLu, String exprBool, boolean notCondition, boolean isExprBool){
		if(!notCondition )
	  		recopier(identLu);
		
		if(isExprBool){
			exprBool+=identLu+ " ";
		}
			return exprBool;
			
	}
	
	public void recopierNotCondition(String identLu, boolean flag){
		if(!flag) recopier(identLu);
	}
	
	public void recopier(String identLu){
		Ecriture.ecrireString(FichierGen,identLu);
	}
	
	public void recopierInt(int entierLu){
		Ecriture.ecrireInt(FichierGen,entierLu);
	}
	
	public void declMethodeBool(String methode, String exprBool){
		Ecriture.ecrireString(FichierGen,"public ");
		Ecriture.ecrireString(FichierGen,"boolean ");
		Ecriture.ecrireString(FichierGen,"cond_"+methode+"(){\n\t\t");
		Ecriture.ecrireString(FichierGen,"return "+"("+exprBool+")");
		Ecriture.ecrireString(FichierGen,";\n\t}\n");
		
	}
	
	public void declSynchronizedAvant(String methode,TabIdent t){
		
		String compteur;
		Ident ident = new Ident(methode);
		ident = t.chercheIdent(methode);
		
		Ecriture.ecrireString(FichierGen,"\n\t\t synchronized(this){ \n\t\t\t");

		Ecriture.ecrireString(FichierGen,"while(!");
		Ecriture.ecrireString(FichierGen,"cond_"+methode+"()){\n\t\t\t\t");
		Ecriture.ecrireString(FichierGen,"this.wait();\n\t\t\t\t}\n\t\t\t");
		
			compteur=ident.getNom()+"_act";
			Ecriture.ecrireString(FichierGen,compteur+"++ ;\n\t\t\t");
			
			if(t.verifCompteur(compteur).containType(Type.SUP)
			   ||t.verifCompteur(compteur).containType(Type.SUPEQUAL)){
				Ecriture.ecrireString(FichierGen,"this.notifyAll();\n\t\t\t}\n\t\t");
			}else{
				Ecriture.ecrireString(FichierGen,"\n\t\t\t}\n\t\t");
			}
		
		
	}
	
	public void declSynchronizedApres(String methode, TabIdent t){
		
		String compteur;
		Ident ident = new Ident(methode);
		ident = t.chercheIdent(methode);
		Ecriture.ecrireString(FichierGen,"synchronized(this){ \n\t\t\t");

		compteur=ident.getNom()+"_act";
		Ecriture.ecrireString(FichierGen,compteur+"-- ;\n\t\t\t}");
		if(t.verifCompteur(compteur).containType(Type.EQUAL) 
		   || t.verifCompteur(compteur).containType(Type.INF)
		   || t.verifCompteur(compteur).containType(Type.INFEQUAL)){
			Ecriture.ecrireString(FichierGen,"this.notifyAll();\n\t\t\t}\n\t\t");
		}else{
			Ecriture.ecrireString(FichierGen,"\n\t\t\t}\n\t\t");
		}
			
		
	}
	
	
	
	
	
}