/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	création : 13 février 2002
 *
 *     nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)

public class Yaka implements Constante{
	

  public static Constante constante;
  public static Expression expression = new Expression();
  public static Declaration declaration = new Declaration();
  public static TabIdent tabIdent = new TabIdent(100);
  /*public static YVM yvm = new YVM();*/
  public static YVMasm yvmasm = new YVMasm();
  public static Yaka analyseur;

  public static String identPrecedent;
  public static int lastType;
  public static String identPrecedent1;
  public static int lastType1;
  public static String lastNomFonc;

  public static void main(String args[]) { 
    java.io.InputStream input;

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.analyse();
      System.out.println("analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
  }
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{
  public static String identLu, chaineLue;
  public static int entierLu;
}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots réservés*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString()); }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu = image.toString();}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'">
	{ chaineLue = image.toString(); }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
   <PROGRAMME> 
   <ident>
   {
   		yvmasm.debutASM();	
	}
	( 
		declFonction()
	)*
	<PRINCIPAL>
	{
		yvmasm.nomFoncASM("main");
	}	
   	bloc()
   	<FPRINCIPAL>
   	<FPROGRAMME> 
   {
    yvmasm.finASM();
   	tabIdent.affiche();
   	yvmasm.fermerFicASM();
   }
}

void declFonction() :{}
{
	type() <FONCTION> <ident> 
	{
		lastNomFonc=YakaTokenManager.identLu;
		declaration.addFonction(lastNomFonc, lastType, Token.beginLine);
		yvmasm.nomFonctionASM(lastNomFonc);
	}	
	paramForms()
	bloc()
	<FFONCTION>
	{
	
		yvmasm.fermeblocASM(tabIdent.getNbParam()*2);
		tabIdent.affiche();
	}
}

void paramForms() :{}
{
	"(" 
	(
	paramForm() 
	("," paramForm())*
	)?
	")"
	{
		declaration.calculOffsetParam(Token.beginLine);
	}
}

void paramForm() :{}
{
	type()
	<ident>
	{
		declaration.addFonctionParam(YakaTokenManager.identLu,lastType, Token.beginLine);
	}
}

void bloc() : {}{
 (
 	declConst()
 )*
 (
 	declVar() 
 )*	
 	{yvmasm.ouvblocASM(tabIdent.getNbVarLocal()*2);}
   (suiteInstr())? 
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
	
  <ident> { identPrecedent = YakaTokenManager.identLu;  } 	  	
   "=" valConst()
  
}

void valConst() : {}{
  <entier> 
	  { 
	  declaration.addConstFromValue(identPrecedent, YakaTokenManager.entierLu, INT,LOCAUX, Token.beginLine);
	  expression.empileOperande(INT);
	  }
 | <ident> 
	 { 
		 declaration.addConstFromIdent(identPrecedent, YakaTokenManager.identLu, LOCAUX,Token.beginLine);
		 expression.empileOperande(lastType); 
	 }
 | <VRAI>	 
 	{ 
 	declaration.addConstFromBoolean(identPrecedent, V,BOOL,LOCAUX);
 	expression.empileOperande(BOOL);  
 	}
 | <FAUX>  
 	{
 	 declaration.addConstFromBoolean(identPrecedent, F,BOOL,LOCAUX);
 	 expression.empileOperande(BOOL); 
 	}
}


void declVar() : {}
{
  <VAR> type()	
  <ident>	
  { 
  	declaration.addVariable(YakaTokenManager.identLu, lastType, LOCAUX);
  } 
  ("," 
      <ident>  { declaration.addVariable(YakaTokenManager.identLu, lastType, LOCAUX); } 
  )* ";"
  	
}

void type() :{}
{
   <ENTIER> 	{ lastType = INT; }		
 | <BOOLEEN>	{ lastType = BOOL; }
}
/*
 * Syntaxe des instructions.
 */
void suiteInstr() : {}
{ 
	
	instruction() (";" (instruction())? )* 
}

void instruction() : {}
{
	affectation() | lecture() | ecriture() | iteration() | condition() | retourne()
}

void retourne() : {}
{
	<RETOURNE>
	expression()
	{
		expression.evaluationReturnFonc(lastNomFonc, Token.beginLine);
		yvmasm.ireturnASM(tabIdent.chercheIdent(lastNomFonc, GLOBAUX, Token.beginLine).getTailleTabParam()*2);
	}
}

void affectation() :{}
{
	<ident> {identPrecedent=YakaTokenManager.identLu;}
	{
		System.out.println("AFFECTATIONJJ\n");
		if(!tabIdent.existeIdent(YakaTokenManager.identLu, LOCAUX, Token.beginLine)){
			System.out.println("\n"+YakaTokenManager.identLu+" n'existe pas dans la table des identificateurs ERREUR ligne : "+Token.beginLine+" \n");
			expression.empileOperande(ERREUR);
		}else{
			expression.empileOperande(tabIdent.chercheIdent(YakaTokenManager.identLu, LOCAUX, Token.beginLine).getType());
		}
	}
	"=" 
	{ 
		expression.empileOperateur(AFFECT);
	}
	expression()
	{
		expression.evaluationExpr(Token.beginLine);
		yvmasm.istoreASM(declaration.returnOffset(identPrecedent, Token.beginLine, LOCAUX));
		
	}
}

void lecture() : {}
{
	<LIRE> 
	"(" 
	<ident> {yvmasm.lireEntASM(tabIdent.chercheIdent(YakaTokenManager.identLu, LOCAUX, Token.beginLine).getOffset());}
	")"
}

void ecriture() : {}
{
  < ECRIRE > "("
  (
    expression()
    {yvmasm.ecrireEntASM();}
  | 
    < chaine >
    {
      yvmasm.ecrireChaineASM(YakaTokenManager.chaineLue);
    }
  )
  ")"
| < ALALIGNE >
  {
    yvmasm.alaligneASM();
  }

}

void iteration() : {}
{
	<TANTQUE> 
	{
		yvmasm.ittqueASM();
	}
	expression()
	{
		yvmasm.iffauxASM(ITERATION);
	} 
	<FAIRE> 
	suiteInstr()
	{
		yvmasm.fgotoASM(ITERATION);
	} 
	<FAIT> 
	{
		yvmasm.ifaitASM();
	}
}

void condition() : {}
{
	<SI>
	{
		yvmasm.isiASM();
	}
	expression()
	{
		yvmasm.iffauxASM(CONDITION);
	}
	<ALORS>
	suiteInstr()
	{
		yvmasm.fgotoASM(CONDITION);
		yvmasm.isinonASM();
	}
	(<SINON> suiteInstr())?
	<FSI>
	{
		yvmasm.ifsiASM();
	}
}


/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() 
  (opRel() 
  simpleExpr() {expression.evaluationExpr(Token.beginLine);} 
  )?
}


void simpleExpr() : {}
{
   terme() 
   (opAdd() 
   terme() {expression.evaluationExpr(Token.beginLine);}	
   )*
}
 
void terme() : {}
{
  facteur() 
  (opMul() 
  facteur()	{expression.evaluationExpr(Token.beginLine);}
  )*
}

void facteur() : {}
{   primaire() 
  |  (opNeg() primaire() {expression.evaluerExprUn(Token.beginLine);})
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {}
{ 
 <entier>
	{
		expression.empileOperande(INT);
		yvmasm.iconstASM(YakaTokenManager.entierLu);
	}		
 | <ident> 
 	{
 		
 		if(tabIdent.typeVarGlobaux(YakaTokenManager.identLu)){
 			lastNomFonc=YakaTokenManager.identLu;
			expression.affectation(YakaTokenManager.identLu, GLOBAUX, Token.beginLine);
		}else{
			expression.affectation(YakaTokenManager.identLu, LOCAUX, Token.beginLine);
		} 	
 	}
 	(
 	argumentsFonction()
 	)?		
 | <VRAI> 
 	{
 	expression.empileOperande(BOOL);
 	yvmasm.iconstASM(V);
 	}		
 | <FAUX> 
 	{
 	expression.empileOperande(BOOL);
 	yvmasm.iconstASM(F);
 	}		
 
}

void argumentsFonction() : {}
{
	"("
	{
		expression.empileNbParam();
	}
	(
	expression()
	{
		expression.controleParametre(lastNomFonc,expression.getpileParametre().peek()-1, Token.beginLine);
	}
	(","
	{
		expression.incrementeSommetParam();
		System.out.println(expression.getpileParametre().peek());
	}
	expression()
	{
		expression.controleParametre(lastNomFonc,expression.getpileParametre().peek()-1, Token.beginLine);
	}
	)*
	)?
	")"
	{
		
		expression.evaluationNbParam(lastNomFonc, Token.beginLine);
		yvmasm.callASM(lastNomFonc);
	}
}

void opRel() : {}
{
   "=="
   {
   	expression.empileOperateur(EGAL); 
   } 		
 | "!="
   {
   	expression.empileOperateur(DIFF); 
   } 	
 | "<" 
 	{
 	expression.empileOperateur(INF);
   } 		
 | "=<"
 	{
 	expression.empileOperateur(INFEGAL);
   }  	
 | ">"
 {
 	expression.empileOperateur(SUP);
   } 	
 | "=>"
 {
 	expression.empileOperateur(SUPEGAL);
   }  	
} 

void opAdd() : {}
{
    "+"
    {
    expression.empileOperateur(PLUS);
   }		
  |  "-" 
  	{
  	expression.empileOperateur(MOINS);
   } 
  | <OU>
  {
  	expression.empileOperateur(OR);
   } 	
}

void opMul() : {}
{
  "*"
  {
  	expression.empileOperateur(MUL);
   }		
  | "/"
  {
  	expression.empileOperateur(DIV);
   }		
  | <ET >
  {
  	expression.empileOperateur(AND);
   }	
} 

void opNeg() : {}
{ "-"
	{
	expression.empileOperateur(INV);
   } 		
 | <NON>
 	{
 	expression.empileOperateur(NOT);
   }	
}


