/* Generated By:JavaCC: Do not edit this line. Yaka.java */
public class Yaka implements Constante, YakaConstants {


  public static Constante constante;
  public static Expression expression = new Expression();
  public static Declaration declaration = new Declaration();
  public static TabIdent tabIdent = new TabIdent(100);
  /*public static YVM yvm = new YVM();*/
  public static YVMasm yvmasm = new YVMasm();
  public static Yaka analyseur;

  public static String identPrecedent;
  public static int lastType;
  public static String identPrecedent1;
  public static int lastType1;
  public static String lastNomFonc;

  public static void main(String args[]) {
    java.io.InputStream input;

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.analyse();
      System.out.println("analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\u005cn"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
  }

/**************************************/
/********debut de la grammaire ********/
/**************************************/
  static final public void analyse() throws ParseException {
    jj_consume_token(PROGRAMME);
    jj_consume_token(ident);
                yvmasm.debutASM();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEEN:
      case ENTIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      declFonction();
    }
    jj_consume_token(PRINCIPAL);
                yvmasm.nomFoncASM("main");
    bloc();
    jj_consume_token(FPRINCIPAL);
    jj_consume_token(FPROGRAMME);
    yvmasm.finASM();
        tabIdent.affiche();
        yvmasm.fermerFicASM();
  }

  static final public void declFonction() throws ParseException {
    type();
    jj_consume_token(FONCTION);
    jj_consume_token(ident);
                lastNomFonc=YakaTokenManager.identLu;
                declaration.addFonction(lastNomFonc, lastType, Token.beginLine);
                yvmasm.nomFonctionASM(lastNomFonc);
    paramForms();
    bloc();
    jj_consume_token(FFONCTION);
                yvmasm.fermeblocASM(tabIdent.getNbParam()*2);
                tabIdent.affiche();
  }

  static final public void paramForms() throws ParseException {
    jj_consume_token(40);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEEN:
    case ENTIER:
      paramForm();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(41);
        paramForm();
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(42);
                declaration.calculOffsetParam(Token.beginLine);
  }

  static final public void paramForm() throws ParseException {
    type();
    jj_consume_token(ident);
                declaration.addFonctionParam(YakaTokenManager.identLu,lastType, Token.beginLine);
  }

  static final public void bloc() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      declConst();
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      declVar();
    }
         yvmasm.ouvblocASM(tabIdent.getNbVarLocal()*2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SI:
    case RETOURNE:
    case TANTQUE:
    case ECRIRE:
    case LIRE:
    case ALALIGNE:
    case ident:
      suiteInstr();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static final public void declConst() throws ParseException {
    jj_consume_token(CONST);
    defConst();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      jj_consume_token(41);
      defConst();
    }
    jj_consume_token(43);
  }

  static final public void defConst() throws ParseException {
    jj_consume_token(ident);
            identPrecedent = YakaTokenManager.identLu;
    jj_consume_token(44);
    valConst();
  }

  static final public void valConst() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case entier:
      jj_consume_token(entier);
          declaration.addConstFromValue(identPrecedent, YakaTokenManager.entierLu, INT,LOCAUX, Token.beginLine);
          expression.empileOperande(INT);
      break;
    case ident:
      jj_consume_token(ident);
                 declaration.addConstFromIdent(identPrecedent, YakaTokenManager.identLu, LOCAUX,Token.beginLine);
                 expression.empileOperande(lastType);
      break;
    case VRAI:
      jj_consume_token(VRAI);
        declaration.addConstFromBoolean(identPrecedent, V,BOOL,LOCAUX);
        expression.empileOperande(BOOL);
      break;
    case FAUX:
      jj_consume_token(FAUX);
         declaration.addConstFromBoolean(identPrecedent, F,BOOL,LOCAUX);
         expression.empileOperande(BOOL);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void declVar() throws ParseException {
    jj_consume_token(VAR);
    type();
    jj_consume_token(ident);
        declaration.addVariable(YakaTokenManager.identLu, lastType, LOCAUX);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      jj_consume_token(41);
      jj_consume_token(ident);
                 declaration.addVariable(YakaTokenManager.identLu, lastType, LOCAUX);
    }
    jj_consume_token(43);
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTIER:
      jj_consume_token(ENTIER);
                  lastType = INT;
      break;
    case BOOLEEN:
      jj_consume_token(BOOLEEN);
                  lastType = BOOL;
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
 * Syntaxe des instructions.
 */
  static final public void suiteInstr() throws ParseException {
    instruction();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      jj_consume_token(43);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SI:
      case RETOURNE:
      case TANTQUE:
      case ECRIRE:
      case LIRE:
      case ALALIGNE:
      case ident:
        instruction();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    }
  }

  static final public void instruction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ident:
      affectation();
      break;
    case LIRE:
      lecture();
      break;
    case ECRIRE:
    case ALALIGNE:
      ecriture();
      break;
    case TANTQUE:
      iteration();
      break;
    case SI:
      condition();
      break;
    case RETOURNE:
      retourne();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void retourne() throws ParseException {
    jj_consume_token(RETOURNE);
    expression();
                expression.evaluationReturnFonc(lastNomFonc, Token.beginLine);
                yvmasm.ireturnASM(tabIdent.chercheIdent(lastNomFonc, GLOBAUX, Token.beginLine).getTailleTabParam()*2);
  }

  static final public void affectation() throws ParseException {
    jj_consume_token(ident);
                 identPrecedent=YakaTokenManager.identLu;
                System.out.println("AFFECTATIONJJ\u005cn");
                if(!tabIdent.existeIdent(YakaTokenManager.identLu, LOCAUX, Token.beginLine)){
                        System.out.println("\u005cn"+YakaTokenManager.identLu+" n'existe pas dans la table des identificateurs ERREUR ligne : "+Token.beginLine+" \u005cn");
                        expression.empileOperande(ERREUR);
                }else{
                        expression.empileOperande(tabIdent.chercheIdent(YakaTokenManager.identLu, LOCAUX, Token.beginLine).getType());
                }
    jj_consume_token(44);
                expression.empileOperateur(AFFECT);
    expression();
                expression.evaluationExpr(Token.beginLine);
                yvmasm.istoreASM(declaration.returnOffset(identPrecedent, Token.beginLine, LOCAUX));
  }

  static final public void lecture() throws ParseException {
    jj_consume_token(LIRE);
    jj_consume_token(40);
    jj_consume_token(ident);
                 yvmasm.lireEntASM(tabIdent.chercheIdent(YakaTokenManager.identLu, LOCAUX, Token.beginLine).getOffset());
    jj_consume_token(42);
  }

  static final public void ecriture() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ECRIRE:
      jj_consume_token(ECRIRE);
      jj_consume_token(40);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VRAI:
      case FAUX:
      case NON:
      case entier:
      case ident:
      case 40:
      case 52:
        expression();
     yvmasm.ecrireEntASM();
        break;
      case chaine:
        jj_consume_token(chaine);
      yvmasm.ecrireChaineASM(YakaTokenManager.chaineLue);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(42);
      break;
    case ALALIGNE:
      jj_consume_token(ALALIGNE);
    yvmasm.alaligneASM();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void iteration() throws ParseException {
    jj_consume_token(TANTQUE);
                yvmasm.ittqueASM();
    expression();
                yvmasm.iffauxASM(ITERATION);
    jj_consume_token(FAIRE);
    suiteInstr();
                yvmasm.fgotoASM(ITERATION);
    jj_consume_token(FAIT);
                yvmasm.ifaitASM();
  }

  static final public void condition() throws ParseException {
    jj_consume_token(SI);
                yvmasm.isiASM();
    expression();
                yvmasm.iffauxASM(CONDITION);
    jj_consume_token(ALORS);
    suiteInstr();
                yvmasm.fgotoASM(CONDITION);
                yvmasm.isinonASM();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINON:
      jj_consume_token(SINON);
      suiteInstr();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(FSI);
                yvmasm.ifsiASM();
  }

/*
 * Expression .
 */
  static final public void expression() throws ParseException {
    simpleExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      opRel();
      simpleExpr();
                expression.evaluationExpr(Token.beginLine);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  static final public void simpleExpr() throws ParseException {
    terme();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OU:
      case 51:
      case 52:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      opAdd();
      terme();
            expression.evaluationExpr(Token.beginLine);
    }
  }

  static final public void terme() throws ParseException {
    facteur();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ET:
      case 53:
      case 54:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_9;
      }
      opMul();
      facteur();
                 expression.evaluationExpr(Token.beginLine);
    }
  }

  static final public void facteur() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VRAI:
    case FAUX:
    case entier:
    case ident:
    case 40:
      primaire();
      break;
    case NON:
    case 52:
      opNeg();
      primaire();
                          expression.evaluerExprUn(Token.beginLine);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void primaire() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VRAI:
    case FAUX:
    case entier:
    case ident:
      valeur();
      break;
    case 40:
      jj_consume_token(40);
      expression();
      jj_consume_token(42);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void valeur() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case entier:
      jj_consume_token(entier);
                expression.empileOperande(INT);
                yvmasm.iconstASM(YakaTokenManager.entierLu);
      break;
    case ident:
      jj_consume_token(ident);
                if(tabIdent.typeVarGlobaux(YakaTokenManager.identLu)){
                        lastNomFonc=YakaTokenManager.identLu;
                        expression.affectation(YakaTokenManager.identLu, GLOBAUX, Token.beginLine);
                }else{
                        expression.affectation(YakaTokenManager.identLu, LOCAUX, Token.beginLine);
                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        argumentsFonction();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
    case VRAI:
      jj_consume_token(VRAI);
        expression.empileOperande(BOOL);
        yvmasm.iconstASM(V);
      break;
    case FAUX:
      jj_consume_token(FAUX);
        expression.empileOperande(BOOL);
        yvmasm.iconstASM(F);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void argumentsFonction() throws ParseException {
    jj_consume_token(40);
                expression.empileNbParam();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VRAI:
    case FAUX:
    case NON:
    case entier:
    case ident:
    case 40:
    case 52:
      expression();
                expression.controleParametre(lastNomFonc,expression.getpileParametre().peek()-1, Token.beginLine);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_10;
        }
        jj_consume_token(41);
                expression.incrementeSommetParam();
                System.out.println(expression.getpileParametre().peek());
        expression();
                expression.controleParametre(lastNomFonc,expression.getpileParametre().peek()-1, Token.beginLine);
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(42);
                expression.evaluationNbParam(lastNomFonc, Token.beginLine);
                yvmasm.callASM(lastNomFonc);
  }

  static final public void opRel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
        expression.empileOperateur(EGAL);
      break;
    case 46:
      jj_consume_token(46);
        expression.empileOperateur(DIFF);
      break;
    case 47:
      jj_consume_token(47);
        expression.empileOperateur(INF);
      break;
    case 48:
      jj_consume_token(48);
        expression.empileOperateur(INFEGAL);
      break;
    case 49:
      jj_consume_token(49);
        expression.empileOperateur(SUP);
      break;
    case 50:
      jj_consume_token(50);
        expression.empileOperateur(SUPEGAL);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void opAdd() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      jj_consume_token(51);
    expression.empileOperateur(PLUS);
      break;
    case 52:
      jj_consume_token(52);
        expression.empileOperateur(MOINS);
      break;
    case OU:
      jj_consume_token(OU);
        expression.empileOperateur(OR);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void opMul() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 53:
      jj_consume_token(53);
        expression.empileOperateur(MUL);
      break;
    case 54:
      jj_consume_token(54);
        expression.empileOperateur(DIV);
      break;
    case ET:
      jj_consume_token(ET);
        expression.empileOperateur(AND);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void opNeg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      jj_consume_token(52);
        expression.empileOperateur(INV);
      break;
    case NON:
      jj_consume_token(NON);
        expression.empileOperateur(NOT);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public YakaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8100,0x0,0x8100,0x80000,0x200,0x52000,0x0,0x120000,0x0,0x8100,0x0,0x52000,0x52000,0x1120000,0x0,0x800,0x0,0x400000,0x800000,0x1120000,0x120000,0x0,0x120000,0x0,0x1120000,0x0,0x400000,0x800000,0x1000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x200,0x0,0x0,0x0,0x47,0x200,0x50,0x200,0x0,0x800,0x47,0x47,0x1001d0,0x5,0x0,0x7e000,0x180000,0x600000,0x100150,0x150,0x100,0x50,0x200,0x100150,0x7e000,0x180000,0x600000,0x100000,};
   }

  /** Constructor with InputStream. */
  public Yaka(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Yaka(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new YakaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Yaka(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new YakaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Yaka(YakaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(YakaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
